// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model School {
  id             String   @id @default(cuid())
  name           String
  shortName      String
  color          String
  secondaryColor String
  memberCount    Int      @default(1)
  degrees        Degree[]
  courses        Course[]
}

model Degree {
  id                  String               @id @default(cuid())
  name                String
  schoolId            String
  school              School               @relation(fields: [schoolId], references: [id])
  credits             Float
  admissionYear       Int
  years               Int
  memberCount         Int                  @default(1)
  requiredCourseIds   String[]
  partialCourses      PartialCourse[]
  subjectRequirements SubjectRequirement[]
}

model SubjectRequirement {
  id       String   @id @default(cuid())
  subject  String[]
  year     Int
  credits  Float
  orHigher Boolean  @default(false)
  degree   Degree?  @relation(fields: [degreeId], references: [id])
  degreeId String?
}

model PartialCourse {
  id         String  @id @default(cuid())
  code       String
  name       String
  credits    Float
  degreeYear Int
  degree     Degree? @relation(fields: [degreeId], references: [id])
  degreeId   String?
}

model Course {
  id          String    @id @default(cuid())
  name        String
  color       String
  segments    Segment[]
  year        Int
  degreeYear  Int
  term        Term      @default(F)
  instructor  String
  memberCount Int       @default(1)
  credits     Float
  code        String
  schoolId    String
  school      School    @relation(fields: [schoolId], references: [id])
}

model Segment {
  id       String @id @default(cuid())
  name     String
  value    Int
  quantity Int
  courseId String
  course   Course @relation(fields: [courseId], references: [id])
}

enum Term {
  F
  W
  S
}

model Task {
  id        String   @id @default(cuid())
  title     String?
  grade     Float
  index     Int
  segmentId String
  courseId  String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  schoolId      String    @default("")
  degreeId      String    @default("")
  courseIds     String[]
  tasks         Task[]
  accounts      Account[]
  sessions      Session[]
  darkMode      Boolean   @default(false)
}

// model Settings {
//   id       String  @id @default(cuid())
//   userId   String  @unique
//   user     User    @relation(fields: [userId], references: [id])
//   darkMode Boolean @default(false)
// }

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
