// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model School {
  id             String       @id @default(cuid())
  name           String
  shortName      String
  color          String
  secondaryColor String
  users          User[]
  degrees        Degree[]
  courseInfos    CourseInfo[]
}

model Degree {
  id                  String                 @id @default(cuid())
  name                String
  schoolId            String
  credits             Float
  admissionYear       Int
  years               Int
  school              School                 @relation(fields: [schoolId], references: [id])
  users               User[]
  courseInfos         DegreesOnCourseInfos[]
  partialCourses      PartialCourse[]
  subjectRequirements SubjectRequirement[]

  @@index([schoolId])
}

model CourseInfo {
  id         String                 @id @default(cuid())
  code       String
  name       String
  color      String
  degreeYear Int
  credits    Float
  schoolId   String
  school     School                 @relation(fields: [schoolId], references: [id])
  courses    Course[]
  degrees    DegreesOnCourseInfos[]

  @@index([schoolId])
}

model DegreesOnCourseInfos {
  degree       Degree     @relation(fields: [degreeId], references: [id])
  degreeId     String
  courseInfo   CourseInfo @relation(fields: [courseInfoId], references: [id])
  courseInfoId String

  @@id([degreeId, courseInfoId])
  @@index([degreeId])
  @@index([courseInfoId])
}

model Course {
  id         String           @id @default(cuid())
  segments   Segment[]
  year       Int
  term       Term             @default(F)
  instructor String
  createdAt  DateTime         @default(now())
  infoId     String
  locationId String?
  info       CourseInfo       @relation(fields: [infoId], references: [id])
  location   CourseLocation?  @relation(fields: [locationId], references: [id])
  users      UsersOnCourses[]

  @@index([infoId])
  @@index([locationId])
}

model CourseLocation {
  id      String   @id @default(cuid())
  lat     Float
  lng     Float
  address String
  courses Course[]
}

model SubjectRequirement {
  id       String                          @id @default(cuid())
  year     Int
  credits  Float
  orHigher Boolean                         @default(false)
  degreeId String
  subject  SubjectsOnSubjectRequirements[]
  degree   Degree                          @relation(fields: [degreeId], references: [id])

  @@index([degreeId])
}

model Subject {
  name         String                          @unique
  requirements SubjectsOnSubjectRequirements[]
}

model SubjectsOnSubjectRequirements {
  subject       Subject            @relation(fields: [subjectName], references: [name])
  subjectName   String
  requirement   SubjectRequirement @relation(fields: [requirementId], references: [id])
  requirementId String

  @@id([subjectName, requirementId])
  @@index([subjectName])
  @@index([requirementId])
}

model PartialCourse {
  id         String @id @default(cuid())
  code       String
  name       String
  credits    Float
  degreeYear Int
  degreeId   String
  degree     Degree @relation(fields: [degreeId], references: [id])

  @@index([degreeId])
}

model Segment {
  id       String @id @default(cuid())
  name     String
  value    Int
  quantity Int
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@index([courseId])
}

enum Term {
  F
  W
  S
}

model Task {
  id        String   @id @default(cuid())
  title     String?
  grade     Float
  index     Int
  segmentId String
  courseId  String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  schoolId      String           @default("")
  degreeId      String           @default("")
  school        School?          @relation(fields: [schoolId], references: [id])
  darkMode      Boolean          @default(false)
  degree        Degree?          @relation(fields: [degreeId], references: [id])
  courses       UsersOnCourses[]
  tasks         Task[]
  accounts      Account[]
  sessions      Session[]

  @@index([degreeId])
  @@index([schoolId])
}

model UsersOnCourses {
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@id([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
